{"version":3,"sources":["components/base.js","components/link.js","App.js","serviceWorker.js","index.js"],"names":["Square","props","react_default","a","createElement","className","id","linksOne","linksTwo","src","alt","linksThree","linksFour","title","blurb","Link","linkId","link","gitLink","href","components_link","linkedLink","mailLink","stackLink","App","base","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NA6BeA,MA3Bf,SAAgBC,GACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACPH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACHL,EAAMM,SACNN,EAAMO,UAEXN,EAAAC,EAAAC,cAAA,OAAKE,GAAG,aACJJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUG,IAAKR,EAAMQ,IAAKC,IAAI,SAE1CR,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACHL,EAAMU,WACNV,EAAMW,YAGnBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMY,OAC7BX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,SAASJ,EAAMa,WCdrCC,MANf,SAAcd,GACV,OACIC,EAAAC,EAAAC,cAAA,KAAGE,GAAIL,EAAMe,OAAQX,UAAWJ,EAAMgB,QCExCC,EAAUhB,EAAAC,EAAAC,cAAA,KAAGe,KAAK,gCAA+BjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMH,KAAK,gBAAgBD,OAAO,cACnFK,EAAanB,EAAAC,EAAAC,cAAA,KAAGe,KAAK,6CAA4CjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMH,KAAK,kBAAkBD,OAAO,iBACrGM,EAAWpB,EAAAC,EAAAC,cAAA,KAAGe,KAAK,0CAAyCjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMH,KAAK,kBAAkBD,OAAO,eAChGO,EAAYrB,EAAAC,EAAAC,cAAA,KAAGe,KAAK,0DAAyDjB,EAAAC,EAAAC,cAACgB,EAAD,CAAMH,KAAK,kBAAkBD,OAAO,gBAuBxGQ,mLAlBX,OACEtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACqB,EAAD,CACAlB,SAAUW,EACVV,SAAUa,EACVV,WAAYW,EACZV,UAAWW,EACXd,IAAI,gBACJI,MAAM,iBACNC,MAAM,8JAZIY,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ef6d1b72.chunk.js","sourcesContent":["import React from 'react'; \r\n\r\nfunction Square(props){\r\n        return (\r\n            <div className=\"base\">\r\n                <div className=\"flex-square\">\r\n                    <div className=\"left-column\">\r\n                            <div id=\"row-link-one\">\r\n                                {props.linksOne}\r\n                                {props.linksTwo}\r\n                            </div>\r\n                            <div id=\"row-image\">\r\n                                <img id=\"c-image\" src={props.src} alt=\"pic\"></img>\r\n                            </div>\r\n                            <div id=\"row-link-two\">\r\n                                {props.linksThree}\r\n                                {props.linksFour}\r\n                            </div>\r\n                    </div>\r\n                    <div className=\"content\">\r\n                        <h1 className=\"title\">{props.title}</h1>\r\n                        <div className=\"grad-line\"></div>\r\n                        <p className=\"blurb\">{props.blurb}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default Square;","import React from 'react'; \r\n\r\nfunction Link(props){\r\n    return(\r\n        <i id={props.linkId} className={props.link}></i>\r\n    );\r\n}\r\n\r\nexport default Link;","import React, { Component } from 'react'; \r\nimport './App.css';\r\nimport Square from './components/base.js';\r\nimport Link from './components/link.js';\r\nimport './logo.svg'\r\n\r\nconst gitLink = <a href=\"https://github.com/jayesh365\"><Link link=\"fab fa-github\" linkId=\"git-icon\"/></a>\r\nconst linkedLink = <a href=\"https://www.linkedin.com/in/jayeshkhullar\"><Link link=\"fab fa-linkedin\" linkId=\"linked-icon\"/></a>\r\nconst mailLink = <a href=\"mailto:jayesh.khullar@mail.utoronto.ca\"><Link link=\"fas fa-envelope\" linkId=\"mail-icon\"/></a>\r\nconst stackLink = <a href=\"https://stackoverflow.com/users/4839739/jayesh-khullar\"><Link link=\"fas fa-file-alt\" linkId=\"stack-icon\"/></a>\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Square\r\n        linksOne={gitLink}\r\n        linksTwo={linkedLink}\r\n        linksThree={mailLink}\r\n        linksFour={stackLink}\r\n        src='takephoto.jpg'\r\n        title=\"Jayesh Khullar\" \r\n        blurb=\"Hey!\r\n        I am a Machine Learning and Data Mining student at UoftT Scarborough. \r\n        I am currently working on projects using Python, Go, and ReactJS.\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}